package jyu.secret.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import jyu.secret.model.Secret;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SECRET.
*/
public class SecretDao extends AbstractDao<Secret, Long> {

    public static final String TABLENAME = "SECRET";

    /**
     * Properties of entity Secret.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property UserId = new Property(2, Long.class, "userId", false, "USER_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Level = new Property(4, Long.class, "level", false, "LEVEL");
        public final static Property Pwd = new Property(5, String.class, "pwd", false, "PWD");
        public final static Property CreatedDate = new Property(6, java.util.Date.class, "createdDate", false, "CREATED_DATE");
        public final static Property UpdatedDate = new Property(7, java.util.Date.class, "updatedDate", false, "UPDATED_DATE");
    };


    public SecretDao(DaoConfig config) {
        super(config);
    }
    
    public SecretDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SECRET' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "'TITLE' TEXT UNIQUE ," + // 1: title
                "'USER_ID' INTEGER," + // 2: userId
                "'NAME' TEXT," + // 3: name
                "'LEVEL' INTEGER," + // 4: level
                "'PWD' TEXT," + // 5: pwd
                "'CREATED_DATE' INTEGER," + // 6: createdDate
                "'UPDATED_DATE' INTEGER);"); // 7: updatedDate
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_SECRET_ID ON SECRET" +
                " (ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_SECRET_TITLE ON SECRET" +
                " (TITLE);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_SECRET_LEVEL ON SECRET" +
                " (LEVEL);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SECRET'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Secret entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        Long level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(5, level);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(6, pwd);
        }
 
        java.util.Date createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindLong(7, createdDate.getTime());
        }
 
        java.util.Date updatedDate = entity.getUpdatedDate();
        if (updatedDate != null) {
            stmt.bindLong(8, updatedDate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Secret readEntity(Cursor cursor, int offset) {
        Secret entity = new Secret( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // level
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pwd
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // createdDate
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // updatedDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Secret entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLevel(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setPwd(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreatedDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setUpdatedDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Secret entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Secret entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
